/*
 * This file is generated by jOOQ.
 */
package com.kopivad.quizzes.domain.db.tables;


import com.kopivad.quizzes.domain.db.Indexes;
import com.kopivad.quizzes.domain.db.Keys;
import com.kopivad.quizzes.domain.db.Public;
import com.kopivad.quizzes.domain.db.tables.records.EvaluationStepsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EvaluationSteps extends TableImpl<EvaluationStepsRecord> {

    private static final long serialVersionUID = 1141360843;

    /**
     * The reference instance of <code>public.evaluation_steps</code>
     */
    public static final EvaluationSteps EVALUATION_STEPS = new EvaluationSteps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EvaluationStepsRecord> getRecordType() {
        return EvaluationStepsRecord.class;
    }

    /**
     * The column <code>public.evaluation_steps.id</code>.
     */
    public final TableField<EvaluationStepsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('evaluation_steps_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.evaluation_steps.minTotal</code>.
     */
    public final TableField<EvaluationStepsRecord, Integer> MINTOTAL = createField(DSL.name("minTotal"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.evaluation_steps.rating</code>.
     */
    public final TableField<EvaluationStepsRecord, String> RATING = createField(DSL.name("rating"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.evaluation_steps.quiz_id</code>.
     */
    public final TableField<EvaluationStepsRecord, Long> QUIZ_ID = createField(DSL.name("quiz_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.evaluation_steps</code> table reference
     */
    public EvaluationSteps() {
        this(DSL.name("evaluation_steps"), null);
    }

    /**
     * Create an aliased <code>public.evaluation_steps</code> table reference
     */
    public EvaluationSteps(String alias) {
        this(DSL.name(alias), EVALUATION_STEPS);
    }

    /**
     * Create an aliased <code>public.evaluation_steps</code> table reference
     */
    public EvaluationSteps(Name alias) {
        this(alias, EVALUATION_STEPS);
    }

    private EvaluationSteps(Name alias, Table<EvaluationStepsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EvaluationSteps(Name alias, Table<EvaluationStepsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EvaluationSteps(Table<O> child, ForeignKey<O, EvaluationStepsRecord> key) {
        super(child, key, EVALUATION_STEPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVALUATION_STEPS_PK);
    }

    @Override
    public Identity<EvaluationStepsRecord, Long> getIdentity() {
        return Keys.IDENTITY_EVALUATION_STEPS;
    }

    @Override
    public UniqueKey<EvaluationStepsRecord> getPrimaryKey() {
        return Keys.EVALUATION_STEPS_PK;
    }

    @Override
    public List<UniqueKey<EvaluationStepsRecord>> getKeys() {
        return Arrays.<UniqueKey<EvaluationStepsRecord>>asList(Keys.EVALUATION_STEPS_PK);
    }

    @Override
    public List<ForeignKey<EvaluationStepsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EvaluationStepsRecord, ?>>asList(Keys.EVALUATION_STEPS__EVALUATION_STEPS_QUIZZES_ID_FK);
    }

    public Quizzes quizzes() {
        return new Quizzes(this, Keys.EVALUATION_STEPS__EVALUATION_STEPS_QUIZZES_ID_FK);
    }

    @Override
    public EvaluationSteps as(String alias) {
        return new EvaluationSteps(DSL.name(alias), this);
    }

    @Override
    public EvaluationSteps as(Name alias) {
        return new EvaluationSteps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EvaluationSteps rename(String name) {
        return new EvaluationSteps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EvaluationSteps rename(Name name) {
        return new EvaluationSteps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
