/*
 * This file is generated by jOOQ.
 */
package com.kopivad.quizzes.domain.db.tables;


import com.kopivad.quizzes.domain.db.Indexes;
import com.kopivad.quizzes.domain.db.Keys;
import com.kopivad.quizzes.domain.db.Public;
import com.kopivad.quizzes.domain.db.tables.records.UsrRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usr extends TableImpl<UsrRecord> {

    private static final long serialVersionUID = -87376154;

    /**
     * The reference instance of <code>public.usr</code>
     */
    public static final Usr USR = new Usr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsrRecord> getRecordType() {
        return UsrRecord.class;
    }

    /**
     * The column <code>public.usr.id</code>.
     */
    public final TableField<UsrRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('usr_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.usr.creation_date</code>.
     */
    public final TableField<UsrRecord, Timestamp> CREATION_DATE = createField(DSL.name("creation_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.usr.email</code>.
     */
    public final TableField<UsrRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usr.name</code>.
     */
    public final TableField<UsrRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usr.password</code>.
     */
    public final TableField<UsrRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usr.role</code>.
     */
    public final TableField<UsrRecord, String> ROLE = createField(DSL.name("role"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.usr</code> table reference
     */
    public Usr() {
        this(DSL.name("usr"), null);
    }

    /**
     * Create an aliased <code>public.usr</code> table reference
     */
    public Usr(String alias) {
        this(DSL.name(alias), USR);
    }

    /**
     * Create an aliased <code>public.usr</code> table reference
     */
    public Usr(Name alias) {
        this(alias, USR);
    }

    private Usr(Name alias, Table<UsrRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usr(Name alias, Table<UsrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Usr(Table<O> child, ForeignKey<O, UsrRecord> key) {
        super(child, key, USR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USR_PKEY);
    }

    @Override
    public Identity<UsrRecord, Long> getIdentity() {
        return Keys.IDENTITY_USR;
    }

    @Override
    public UniqueKey<UsrRecord> getPrimaryKey() {
        return Keys.USR_PKEY;
    }

    @Override
    public List<UniqueKey<UsrRecord>> getKeys() {
        return Arrays.<UniqueKey<UsrRecord>>asList(Keys.USR_PKEY);
    }

    @Override
    public Usr as(String alias) {
        return new Usr(DSL.name(alias), this);
    }

    @Override
    public Usr as(Name alias) {
        return new Usr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usr rename(String name) {
        return new Usr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usr rename(Name name) {
        return new Usr(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Timestamp, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
