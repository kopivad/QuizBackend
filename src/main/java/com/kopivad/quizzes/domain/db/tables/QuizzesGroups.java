/*
 * This file is generated by jOOQ.
 */
package com.kopivad.quizzes.domain.db.tables;


import com.kopivad.quizzes.domain.db.Keys;
import com.kopivad.quizzes.domain.db.Public;
import com.kopivad.quizzes.domain.db.tables.records.QuizzesGroupsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuizzesGroups extends TableImpl<QuizzesGroupsRecord> {

    private static final long serialVersionUID = 1069747830;

    /**
     * The reference instance of <code>public.quizzes_groups</code>
     */
    public static final QuizzesGroups QUIZZES_GROUPS = new QuizzesGroups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizzesGroupsRecord> getRecordType() {
        return QuizzesGroupsRecord.class;
    }

    /**
     * The column <code>public.quizzes_groups.quiz_id</code>.
     */
    public final TableField<QuizzesGroupsRecord, Long> QUIZ_ID = createField(DSL.name("quiz_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.quizzes_groups.group_id</code>.
     */
    public final TableField<QuizzesGroupsRecord, Long> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.quizzes_groups</code> table reference
     */
    public QuizzesGroups() {
        this(DSL.name("quizzes_groups"), null);
    }

    /**
     * Create an aliased <code>public.quizzes_groups</code> table reference
     */
    public QuizzesGroups(String alias) {
        this(DSL.name(alias), QUIZZES_GROUPS);
    }

    /**
     * Create an aliased <code>public.quizzes_groups</code> table reference
     */
    public QuizzesGroups(Name alias) {
        this(alias, QUIZZES_GROUPS);
    }

    private QuizzesGroups(Name alias, Table<QuizzesGroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuizzesGroups(Name alias, Table<QuizzesGroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuizzesGroups(Table<O> child, ForeignKey<O, QuizzesGroupsRecord> key) {
        super(child, key, QUIZZES_GROUPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<QuizzesGroupsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuizzesGroupsRecord, ?>>asList(Keys.QUIZZES_GROUPS__QUIZZES_GROUPS_QUIZZES_ID_FK, Keys.QUIZZES_GROUPS__QUIZZES_GROUPS_GROUPS_ID_FK);
    }

    public Quizzes quizzes() {
        return new Quizzes(this, Keys.QUIZZES_GROUPS__QUIZZES_GROUPS_QUIZZES_ID_FK);
    }

    public Groups groups() {
        return new Groups(this, Keys.QUIZZES_GROUPS__QUIZZES_GROUPS_GROUPS_ID_FK);
    }

    @Override
    public QuizzesGroups as(String alias) {
        return new QuizzesGroups(DSL.name(alias), this);
    }

    @Override
    public QuizzesGroups as(Name alias) {
        return new QuizzesGroups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizzesGroups rename(String name) {
        return new QuizzesGroups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizzesGroups rename(Name name) {
        return new QuizzesGroups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
