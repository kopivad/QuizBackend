/*
 * This file is generated by jOOQ.
 */
package com.kopivad.quizzes.domain.db.tables;


import com.kopivad.quizzes.domain.db.Indexes;
import com.kopivad.quizzes.domain.db.Keys;
import com.kopivad.quizzes.domain.db.Public;
import com.kopivad.quizzes.domain.db.tables.records.QuizHistoriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuizHistories extends TableImpl<QuizHistoriesRecord> {

    private static final long serialVersionUID = -598172013;

    /**
     * The reference instance of <code>public.quiz_histories</code>
     */
    public static final QuizHistories QUIZ_HISTORIES = new QuizHistories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizHistoriesRecord> getRecordType() {
        return QuizHistoriesRecord.class;
    }

    /**
     * The column <code>public.quiz_histories.id</code>.
     */
    public final TableField<QuizHistoriesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.quiz_histories.user_id</code>.
     */
    public final TableField<QuizHistoriesRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.quiz_histories.total</code>.
     */
    public final TableField<QuizHistoriesRecord, Integer> TOTAL = createField(DSL.name("total"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.quiz_histories.session_id</code>.
     */
    public final TableField<QuizHistoriesRecord, Long> SESSION_ID = createField(DSL.name("session_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.quiz_histories.rating</code>.
     */
    public final TableField<QuizHistoriesRecord, String> RATING = createField(DSL.name("rating"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.quiz_histories.pdf_filename</code>.
     */
    public final TableField<QuizHistoriesRecord, String> PDF_FILENAME = createField(DSL.name("pdf_filename"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.quiz_histories.csv_filename</code>.
     */
    public final TableField<QuizHistoriesRecord, String> CSV_FILENAME = createField(DSL.name("csv_filename"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.quiz_histories</code> table reference
     */
    public QuizHistories() {
        this(DSL.name("quiz_histories"), null);
    }

    /**
     * Create an aliased <code>public.quiz_histories</code> table reference
     */
    public QuizHistories(String alias) {
        this(DSL.name(alias), QUIZ_HISTORIES);
    }

    /**
     * Create an aliased <code>public.quiz_histories</code> table reference
     */
    public QuizHistories(Name alias) {
        this(alias, QUIZ_HISTORIES);
    }

    private QuizHistories(Name alias, Table<QuizHistoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuizHistories(Name alias, Table<QuizHistoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuizHistories(Table<O> child, ForeignKey<O, QuizHistoriesRecord> key) {
        super(child, key, QUIZ_HISTORIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUIZ_HISTORIES_PK);
    }

    @Override
    public UniqueKey<QuizHistoriesRecord> getPrimaryKey() {
        return Keys.QUIZ_HISTORIES_PK;
    }

    @Override
    public List<UniqueKey<QuizHistoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizHistoriesRecord>>asList(Keys.QUIZ_HISTORIES_PK);
    }

    @Override
    public List<ForeignKey<QuizHistoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuizHistoriesRecord, ?>>asList(Keys.QUIZ_HISTORIES__QUIZ_HISTORIES_USR_ID_FK, Keys.QUIZ_HISTORIES__QUIZ_HISTORIES_QUIZ_SESSIONS_ID_FK);
    }

    public Usr usr() {
        return new Usr(this, Keys.QUIZ_HISTORIES__QUIZ_HISTORIES_USR_ID_FK);
    }

    public QuizSessions quizSessions() {
        return new QuizSessions(this, Keys.QUIZ_HISTORIES__QUIZ_HISTORIES_QUIZ_SESSIONS_ID_FK);
    }

    @Override
    public QuizHistories as(String alias) {
        return new QuizHistories(DSL.name(alias), this);
    }

    @Override
    public QuizHistories as(Name alias) {
        return new QuizHistories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizHistories rename(String name) {
        return new QuizHistories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizHistories rename(Name name) {
        return new QuizHistories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Integer, Long, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
