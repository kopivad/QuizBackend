/*
 * This file is generated by jOOQ.
 */
package com.kopivad.quizzes.domain.db.tables;


import com.kopivad.quizzes.domain.db.Indexes;
import com.kopivad.quizzes.domain.db.Keys;
import com.kopivad.quizzes.domain.db.Public;
import com.kopivad.quizzes.domain.db.tables.records.ApiClientsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiClients extends TableImpl<ApiClientsRecord> {

    private static final long serialVersionUID = 1603311;

    /**
     * The reference instance of <code>public.api_clients</code>
     */
    public static final ApiClients API_CLIENTS = new ApiClients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiClientsRecord> getRecordType() {
        return ApiClientsRecord.class;
    }

    /**
     * The column <code>public.api_clients.id</code>.
     */
    public final TableField<ApiClientsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('api_clients_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.api_clients.password</code>.
     */
    public final TableField<ApiClientsRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.api_clients.username</code>.
     */
    public final TableField<ApiClientsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.api_clients</code> table reference
     */
    public ApiClients() {
        this(DSL.name("api_clients"), null);
    }

    /**
     * Create an aliased <code>public.api_clients</code> table reference
     */
    public ApiClients(String alias) {
        this(DSL.name(alias), API_CLIENTS);
    }

    /**
     * Create an aliased <code>public.api_clients</code> table reference
     */
    public ApiClients(Name alias) {
        this(alias, API_CLIENTS);
    }

    private ApiClients(Name alias, Table<ApiClientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiClients(Name alias, Table<ApiClientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ApiClients(Table<O> child, ForeignKey<O, ApiClientsRecord> key) {
        super(child, key, API_CLIENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.API_CLIENTS_PKEY);
    }

    @Override
    public Identity<ApiClientsRecord, Long> getIdentity() {
        return Keys.IDENTITY_API_CLIENTS;
    }

    @Override
    public UniqueKey<ApiClientsRecord> getPrimaryKey() {
        return Keys.API_CLIENTS_PKEY;
    }

    @Override
    public List<UniqueKey<ApiClientsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiClientsRecord>>asList(Keys.API_CLIENTS_PKEY);
    }

    @Override
    public ApiClients as(String alias) {
        return new ApiClients(DSL.name(alias), this);
    }

    @Override
    public ApiClients as(Name alias) {
        return new ApiClients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiClients rename(String name) {
        return new ApiClients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiClients rename(Name name) {
        return new ApiClients(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
