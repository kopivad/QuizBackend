/*
 * This file is generated by jOOQ.
 */
package com.kopivad.testingsystem.domain.db.tables;


import com.kopivad.testingsystem.domain.db.Indexes;
import com.kopivad.testingsystem.domain.db.Keys;
import com.kopivad.testingsystem.domain.db.Public;
import com.kopivad.testingsystem.domain.db.tables.records.QuizzesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quizzes extends TableImpl<QuizzesRecord> {

    private static final long serialVersionUID = -1573889482;

    /**
     * The reference instance of <code>public.quizzes</code>
     */
    public static final Quizzes QUIZZES = new Quizzes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizzesRecord> getRecordType() {
        return QuizzesRecord.class;
    }

    /**
     * The column <code>public.quizzes.id</code>.
     */
    public final TableField<QuizzesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('quizzes_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.quizzes.active</code>.
     */
    public final TableField<QuizzesRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.quizzes.created</code>.
     */
    public final TableField<QuizzesRecord, Timestamp> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.quizzes.description</code>.
     */
    public final TableField<QuizzesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.quizzes.title</code>.
     */
    public final TableField<QuizzesRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.quizzes.user_id</code>.
     */
    public final TableField<QuizzesRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.quizzes</code> table reference
     */
    public Quizzes() {
        this(DSL.name("quizzes"), null);
    }

    /**
     * Create an aliased <code>public.quizzes</code> table reference
     */
    public Quizzes(String alias) {
        this(DSL.name(alias), QUIZZES);
    }

    /**
     * Create an aliased <code>public.quizzes</code> table reference
     */
    public Quizzes(Name alias) {
        this(alias, QUIZZES);
    }

    private Quizzes(Name alias, Table<QuizzesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quizzes(Name alias, Table<QuizzesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Quizzes(Table<O> child, ForeignKey<O, QuizzesRecord> key) {
        super(child, key, QUIZZES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUIZZES_PKEY);
    }

    @Override
    public Identity<QuizzesRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUIZZES;
    }

    @Override
    public UniqueKey<QuizzesRecord> getPrimaryKey() {
        return Keys.QUIZZES_PKEY;
    }

    @Override
    public List<UniqueKey<QuizzesRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizzesRecord>>asList(Keys.QUIZZES_PKEY);
    }

    @Override
    public List<ForeignKey<QuizzesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuizzesRecord, ?>>asList(Keys.QUIZZES__FKA2RODABLX8MHCE3BDAJ19EQHE);
    }

    public Users users() {
        return new Users(this, Keys.QUIZZES__FKA2RODABLX8MHCE3BDAJ19EQHE);
    }

    @Override
    public Quizzes as(String alias) {
        return new Quizzes(DSL.name(alias), this);
    }

    @Override
    public Quizzes as(Name alias) {
        return new Quizzes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizzes rename(String name) {
        return new Quizzes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizzes rename(Name name) {
        return new Quizzes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Boolean, Timestamp, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
